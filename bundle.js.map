{"version":3,"sources":["webpack:///webpack/bootstrap 06923e68f10a1c200a89","webpack:///./lib/draw.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,eAAe,wBAAwB;AACveAAe;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,8BAA8B,eAAe;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,4EAA4E;AAC3F;;AAEA;AACA;AACA;AACA,eAAe,kGAAkG;AACjH;;AAEA;AACA;AACA,iBAAiB,4EAA4E;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,iBAAiB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kGAAkG;;AAEnH;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,iBAAiB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 06923e68f10a1c200a89","let canvas = document.getElementById('myCanvas');\r\nlet ctx = canvas.getContext('2d');\r\nlet paint = false;\r\n\r\nlet prevX = 0,\r\n  currX = 0,\r\n  prevY = 0,\r\n  currY = 0,\r\n  dot_paint = false;\r\n\r\nlet lineColor = 'black',\r\n  brushSize = 5;\r\n\r\nlet line = [];\r\n\r\nconst colorButton = document.getElementsByClassName('colorButton');\r\nfor (var i = 0; i < colorButton.length; i++) {\r\n  colorButton.item(i).onclick = event => {\r\n    lineColor = event.target.id;\r\n  };\r\n}\r\n\r\nconst eraseButton = document.getElementById('white')\r\neraseButton.onclick = event => {\r\n  lineColor = 'white';\r\n  brushSize = 50;\r\n  canvas.onmousedown = event => {\r\n    paint = true;\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineJoin = 'round';\r\n    ctx.moveTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\r\n  };\r\n\r\n  canvas.onmousemove = event => {\r\n    if (paint) {\r\n      ctx.lineTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\r\n      ctx.strokeStyle = lineColor;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  canvas.onmouseup = () => {\r\n    paint = false;\r\n  };\r\n\r\n}\r\n\r\nconst penButton = document.getElementById('pen');\r\npenButton.onclick = () => {\r\n  pen();\r\n}\r\n\r\nconst sprayButton = document.getElementById('spray');\r\nsprayButton.onclick = () => {\r\n  sprayPaint();\r\n}\r\n\r\nconst chiselButton = document.getElementById('chisel');\r\nchiselButton.onclick = () => {\r\n  chisel();\r\n}\r\n\r\nconst webButton = document.getElementById('web');\r\nwebButton.onclick = () => {\r\n  spiderWeb();\r\n}\r\n\r\nfunction pen() {\r\n  canvas.onmousedown = event => {\r\n    paint = true;\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineJoin = 'round';\r\n    ctx.moveTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\r\n  };\r\n\r\n  canvas.ontouchstart = event => {\r\n    paint = true;\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineJoin = 'round';\r\n    ctx.moveTo(event.touches[0].clientX - canvas.offsetLeft, event.touches[0].clientY - canvas.offsetTop);\r\n  };\r\n\r\n  canvas.onmousemove = event => {\r\n    if (paint) {\r\n      ctx.lineTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\r\n      ctx.strokeStyle = lineColor;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  canvas.ontouchmove = event => {\r\n    if (paint) {\r\n      ctx.lineTo(event.touches[0].clientX - canvas.offsetLeft, event.touches[0].clientY - canvas.offsetTop);\r\n      ctx.strokeStyle = lineColor;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  canvas.onmouseup = () => {\r\n    paint = false;\r\n  };\r\n\r\n  canvas.ontouchend = () => {\r\n    paint = false;\r\n  };\r\n}\r\n\r\nfunction sprayPaint() {\r\n  canvas.onmousedown = event => {\r\n    paint = true;\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineJoin = 'round';\r\n    ctx.shadowBlur = 10;\r\n    ctx.shadowColor = lineColor;\r\n    ctx.moveTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\r\n  };\r\n\r\n  canvas.ontouchstart = event => {\r\n    paint = true;\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineJoin = 'round';\r\n    ctx.shadowBlur = 10;\r\n    ctx.shadowColor = lineColor;\r\n    ctx.moveTo(event.touches[0].clientX - canvas.offsetLeft, event.touches[0].clientY - canvas.offsetTop);\r\n  };\r\n\r\n  canvas.onmousemove = event => {\r\n    if (paint) {\r\n      ctx.lineTo(event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop);\r\n      ctx.strokeStyle = lineColor;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  canvas.ontouchmove = event => {\r\n    if (paint) {\r\n      ctx.lineTo(event.touches[0].clientX - canvas.offsetLeft, event.touches[0].clientY - canvas.offsetTop);\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  canvas.onmouseup = () => {\r\n    paint = false;\r\n  };\r\n\r\n  canvas.ontouchend = () => {\r\n    paint = false;\r\n  };\r\n}\r\n\r\nfunction chisel() {\r\n  canvas.onmousedown = event => {\r\n    paint = true;\r\n    line = [event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop];\r\n  };\r\n\r\n  canvas.ontouchstart = event => {\r\n    paint = true;\r\n    line = [event.touches[0].clientX - canvas.offsetLeft, event.touches[0].clientY - canvas.offsetTop];\r\n  };\r\n\r\n  canvas.onmousemove = event => {\r\n    if (paint) {\r\n      ctx.beginPath();\r\n\r\n      for (var i = -brushSize; i < brushSize; i++) {\r\n        ctx.moveTo(line[0] + i, line[1] + i);\r\n        ctx.lineTo(event.clientX + i - canvas.offsetLeft, event.clientY + i - canvas.offsetTop);\r\n        ctx.strokeStyle = lineColor;\r\n        ctx.stroke();\r\n      }\r\n\r\n      line = [event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop];\r\n    }\r\n  };\r\n\r\n  canvas.ontouchmove = event => {\r\n    if (paint) {\r\n      ctx.beginPath();\r\n\r\n\r\n      for (var i = -brushSize; i < brushSize; i++) {\r\n        ctx.moveTo(line[0] + i, line[1] + i);\r\n        ctx.lineTo(event.touches[0].clientX + i - canvas.offsetLeft, event.touches[0].clientY + i - canvas.offsetTop);\r\n        ctx.strokeStyle = lineColor;\r\n        ctx.stroke();\r\n      }\r\n\r\n      line = [event.clientX - canvas.offsetLeft, event.clientY - canvas.offsetTop];\r\n    }\r\n  };\r\n\r\n  canvas.onmouseup = () => {\r\n    paint = false;\r\n  };\r\n\r\n  canvas.ontouchend = () => {\r\n    paint = false;\r\n  };\r\n}\r\n\r\nfunction spiderWeb() {\r\n  canvas.onmousedown = event => {\r\n    line = [];\r\n    paint = true;\r\n    line.push({ x: event.clientX - canvas.offsetLeft, y: event.clientY - canvas.offsetTop });\r\n  };\r\n\r\n  canvas.ontouchstart = event => {\r\n    line = [];\r\n    paint = true;\r\n    line.push({ x: event.touches[0].clientX - canvas.offsetLeft, y: event.touches[0].clientY - canvas.offsetTop });\r\n  };\r\n\r\n  canvas.onmousemove = event => {\r\n    if (paint) {\r\n      line.push({ x: event.clientX - canvas.offsetLeft, y: event.clientY - canvas.offsetTop });\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(line[line.length - 2].x, line[line.length - 2].y);\r\n      ctx.lineTo(line[line.length - 1].x, line[line.length - 1].y);\r\n      ctx.strokeStyle = lineColor;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n\r\n      for (var i = 0; i < line.length; i++) {\r\n        let dx = line[i].x - line[line.length - 1].x;\r\n        let dy = line[i].y - line[line.length - 1].y;\r\n        let d = (dx ** 2) + (dy ** 2);\r\n\r\n        if (d < 5000) {\r\n          ctx.beginPath();\r\n          ctx.strokeStyle = lineColor;\r\n          ctx.moveTo(line[line.length - 1].x + (dx * 0.2), line[line.length - 1].y + (dy * 0.2));\r\n          ctx.lineTo(line[i].x - (dx * 0.2), line[i].y - (dy * 0.2));\r\n          ctx.stroke();\r\n        }\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  canvas.ontouchmove = event => {\r\n    if (paint) {\r\n      line.push({ x: event.touches[0].clientX - canvas.offsetLeft, y: event.touches[0].clientY - canvas.offsetTop });\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(line[line.length - 2].x, line[line.length - 2].y);\r\n      ctx.lineTo(line[line.length - 1].x, line[line.length - 1].y);\r\n      ctx.strokeStyle = lineColor;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n\r\n      for (var i = 0; i < line.length; i++) {\r\n        let dx = line[i].x - line[line.length - 1].x;\r\n        let dy = line[i].y - line[line.length - 1].y;\r\n        let d = (dx ** 2) + (dy ** 2);\r\n\r\n        if (d < 1000) {\r\n          ctx.beginPath();\r\n          ctx.strokeStyle = lineColor;\r\n          ctx.moveTo(line[line.length - 1].x + (dx * 0.2), line[line.length - 1].y + (dy * 0.2));\r\n          ctx.lineTo(line[i].x - (dx * 0.2), line[i].y - (dy * 0.2));\r\n          ctx.stroke();\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  canvas.onmouseup = () => {\r\n    paint = false;\r\n    line = [];\r\n  };\r\n\r\n  canvas.ontouchend = () => {\r\n    paint = false;\r\n    line = [];\r\n  };\r\n}\r\n\r\n\r\n//\r\n// function fill(event) {\r\n//   let dx = currX - prevX;\r\n//   let dy = currY - prevY;\r\n//\r\n//   let signX = (dx === 0 ? 0 : dx/Math.abs(dx));\r\n//   let signY = (dy === 0 ? 0 : dy/Math.abs(dy));\r\n//   let growth = (Math.abs(dx) > Math.abs(dy) ? Math.abs(dx) : Math.abs(dy));\r\n//   let restraint = (Math.abs(dx) > Math.abs(dy) ? Math.abs(dy) : Math.abs(dx));\r\n//   let greater = (growth === Math.abs(dx) ? 'x' : 'y');\r\n//   let slope = (growth / (restraint === 0 ? 1 : restraint));\r\n//\r\n//   let drawX = prevX;\r\n//   let drawY = prevY;\r\n//   let moveX = prevX;\r\n//   let moveY = prevY;\r\n//   for (var i = 0; i < growth; i++) {\r\n//     if (greater === 'x') {\r\n//       moveY += signY / slope;\r\n//       drawY = Math.floor(moveY);\r\n//       drawX += signX;\r\n//     } else {\r\n//       moveX += signX / slope;\r\n//       drawX = Math.floor(moveX);\r\n//       drawY += signY;\r\n//     }\r\n//\r\n//     draw('fill', event, drawX, drawY);\r\n//   }\r\n//\r\n// }\r\n//\r\n// // function erase() {\r\n// //   let message = confirm('Want to clear?');\r\n// //   if (message) {\r\n// //     ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n// //   }\r\n// // }\r\n//\r\n// function draw(res, event, drawX, drawY) {\r\n//   if (res == 'down') {\r\n//     prevX = currX;\r\n//     prevY = currY;\r\n//     currX = event.clientX - canvas.offsetLeft;\r\n//     currY = event.clientY - canvas.offsetTop;\r\n//\r\n//     paint = true;\r\n//     dot_paint = true;\r\n//\r\n//     if (event.button == 0) {\r\n//       lineColor = 'black';\r\n//       brushSize = 5;\r\n//     }\r\n//\r\n//     if (event.button == 2) {\r\n//       lineColor = 'white';\r\n//       brushSize = 24;\r\n//     }\r\n//     if (dot_paint) {\r\n//       ctx.beginPath();\r\n//       ctx.fillStyle = lineColor;\r\n//       ctx.arc(currX, currY, brushSize, 0, Math.PI*2);\r\n//       ctx.fill();\r\n//       ctx.closePath();\r\n//       dot_paint = false;\r\n//     }\r\n//   }\r\n//   if (res == 'up' || res == 'out') {\r\n//     paint = false;\r\n//   }\r\n//   if (res == 'move') {\r\n//     if (paint) {\r\n//       prevX = currX;\r\n//       prevY = currY;\r\n//       currX = event.clientX - canvas.offsetLeft;\r\n//       currY = event.clientY - canvas.offsetTop;\r\n//       fill(event);\r\n//     }\r\n//   }\r\n//   if (res == 'fill') {\r\n//     ctx.beginPath();\r\n//     ctx.fillStyle = lineColor;\r\n//     ctx.arc(drawX, drawY, brushSize, 0, Math.PI*2);\r\n//     ctx.fill();\r\n//     ctx.closePath();\r\n//   }\r\n// }\r\n//\r\n// init();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}